
Project-3
You will design a New York City Route Planner where ~20-30 major cities in New York State
(e.g., Rochester, Buffalo, Syracuse, Albany, Ithaca, Binghamton, Niagara Falls, New York City,
etc.) are represented as nodes in a graph. The edges between cities will be weighted by actual
road distances (miles). The heuristic cost for informed search will be the straight-line distance
between city coordinates (compute using the Haversine formula or any other alternatives). The
start node is Rochester (RIT), and the user will choose the destination city. You should
implement DFS, BFS, IDS, UCS, Greedy Best-First Search, A*, and IDA* search to find paths
from Rochester to the chosen destination. For each algorithm, compare the path cost, number
of expanded nodes, and runtime, and clearly identify which algorithm(s) return optimal solutions
under these conditions. A graph drawing with nodes and weighted edges must be developed.
You are required to prepare the dataset yourself (nodes, road distances, and heuristic values),
making any reasonable assumptions whenever needed or when exact data is not obvious




# NYC Route Planner - Project Structure & Implementation Plan

## Project Directory Structure

```
CSCI-{331}-{04}-Group-{6}/
│
├── README.md                    # Project overview, abstract, team members, run instructions
├── requirements.txt             # Python dependencies
├── .gitignore                  # Git ignore file
│
├── code/
│   ├── main.py                 # Main entry point for the application
│   ├── config.py               # Configuration settings (constants, parameters)
│   │
│   ├── core/
│   │   ├── __init__.py
│   │   ├── graph.py            # Graph and City classes
│   │   ├── search_result.py    # SearchResult class
│   │   └── priority_queue.py   # Priority queue implementation
│   │
│   ├── algorithms/
│   │   ├── __init__.py
│   │   ├── base_algorithm.py   # Abstract SearchAlgorithm class
│   │   ├── uninformed/
│   │   │   ├── __init__.py
│   │   │   ├── dfs.py         # Depth-First Search
│   │   │   ├── bfs.py         # Breadth-First Search
│   │   │   ├── ids.py         # Iterative Deepening Search
│   │   │   └── ucs.py         # Uniform Cost Search
│   │   └── informed/
│   │       ├── __init__.py
│   │       ├── greedy.py      # Greedy Best-First Search
│   │       ├── astar.py       # A* Search
│   │       └── idastar.py     # IDA* Search
│   │
│   ├── utils/
│   │   ├── __init__.py
│   │   ├── data_loader.py     # Load cities and edges data
│   │   ├── heuristics.py      # Heuristic calculations (Haversine, etc.)
│   │   ├── visualizer.py      # Graph visualization and plotting
│   │   └── route_planner.py   # Main controller class
│   │
│   ├── gui/
│   │   ├── __init__.py
│   │   └── app.py             # Optional GUI interface (Tkinter/Streamlit)
│   │
│   └── tests/
│       ├── __init__.py
│       ├── test_graph.py
│       ├── test_algorithms.py
│       └── test_heuristics.py
│
├── data/
│   ├── cities.csv              # City data (name, latitude, longitude)
│   ├── edges.csv               # Edge data (city1, city2, distance)
│   ├── processed/
│   │   └── graph.pickle        # Cached graph object
│   └── raw/
│       └── ny_cities_data.txt  # Original research data
│
├── resources/
│   ├── papers/                 # Research papers on search algorithms
│   │   ├── astar_paper.pdf
│   │   └── search_algorithms_comparison.pdf
│   ├── references.md           # List of references and resources
│   ├── notes/
│   │   └── algorithm_notes.md
│   └── presentation/
│       └── final_presentation.pptx
│
└── results/
    ├── visualizations/         # Generated graphs and maps
    ├── comparisons/           # Algorithm comparison charts
    └── reports/              # Performance analysis reports

```

## Deliverables Checklist
- [ ] Functional graph with 20-30 NY cities
- [ ] All 7 search algorithms implemented
- [ ] Visual graph representation
- [ ] Performance comparison analysis
- [ ] Optimal algorithm identification
- [ ] Complete documentation
- [ ] Presentation materials
- [ ] Clean, well-commented code
- [ ] Comprehensive README











